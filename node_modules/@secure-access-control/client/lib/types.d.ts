export type onProgress = (progressEvent: AxiosProgressEvent) => {};

export interface AxiosProgressEvent {
  loaded: number;
  total?: number;
  progress?: number;
  bytes: number;
  rate?: number;
  estimated?: number;
  upload?: boolean;
  download?: boolean;
}

interface HttpRequestBody {
  [key: string]: any;
}

interface HttpRequestHeader {
  "x-hash": string;
  "x-request-from": string;
  authorization: string;
}

export enum HttpClient {
  MOBILE = "mobile",
  WEB_MOBILE = "web-mobile",
  WEB = "web",
  SERVER = "server",
}

export enum HttpMethod {
  GET = "get",
  POST = "post",
  PUT = "put",
  DELETE = "delete",
  PATCH = "patch",
  DEFAULT = "get",
}

interface HttpRequest {
  // `baseURL` will be prepended to `url` unless `url` is absolute.
  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs
  // to methods of that instance.
  baseURL: string;
  // `url` is the server URL that will be used for the request
  url: string;
  // `method` is the request method to be used when making the request
  method: HttpMethod;
  data?: HttpRequestBody;
  // `timeout` specifies the number of milliseconds before the request times out.
  // If the request takes longer than `timeout`, the request will be aborted.
  // default is `0` (no timeout)
  timeout?: 0 | 1000 | number;
  // `onUploadProgress` allows handling of progress events for uploads
  // browser only
  onUploadProgress?: (progressEvent: AxiosProgressEvent) => void;
  // `onDownloadProgress` allows handling of progress events for downloads
  // browser only
  onDownloadProgress?: (progressEvent: AxiosProgressEvent) => void;
  headers: any;
}

export declare const createRequest = (baseURL: string, url: string, method: HttpMethod, requestFrom: HttpClient, token?: string | null, data?: RequestBody, timeout?: number, onUploadProgress?: onProgress, onDownloadProgress?: onProgress): HttpRequest => {};

/**
 * Service which is used to convert plain string to base64 string and base64 text into normal string
 */
export declare const base64 = {
  /**
   * Function to convert string to base64 string
   * @param { string } plainText
   * @returns
   */
  encode: (plainText: string): string => {},
  /**
   * Function to convert base64 string to normal string
   * @param { string } base64Text
   * @returns
   */
  decode: (base64Text: string): string => {},
};
