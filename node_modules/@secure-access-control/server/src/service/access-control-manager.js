import sha256 from "sha256";
import accessTokenManager from "./access-token-manager.js";

/**
 * accessControlManager Middleware to verify auth token and to verify client access
 */
const accessControlManager = {
  /**
   * Middleware to verify the access token
   * @param {*} req
   * @param {*} res
   * @param {*} next
   * @returns
   */
  auth: (req, res, next) => {
    let accessToken = req.headers["authorization"]?.replace("Bearer ",'');
    if (!accessToken || accessToken === "") return res.status(401).json({ message: "access token is missing" });

    try {
      let user = accessTokenManager.verify(accessToken, req.headers["user-agent"]);
      req.auth = { user: user };
      next();
    } catch (ex) {
      return res.status(ex?.statusCode || 401).json({
        message: "unauthenticated",
      });
    }
  },

  /**
   * Middleware to check the hash key verification
   * @param {*} req
   * @param {*} res
   * @param {*} next
   */
  client: (req, res, next) => {
    let method = (req.method + "").toLowerCase();
    let url = req.originalUrl.startsWith("/") ? req.originalUrl.replace("/", "") : req.originalUrl;

    const requestData = {
      baseURL: process.env.BASE_URL,
      headers: { "x-user-agent": req.headers["x-user-agent"] },
      method: method,
      url: url,
    };

    let accessToken = req.headers["authorization"] || null;
    if (accessToken) requestData.headers.authorization = accessToken;

    let requestHash = sha256(JSON.stringify(requestData));
    if (requestHash !== req.headers["x-hash"]) return res.status(403).json({ statusCode: 403, error: "Forbidden", message: "Service is unavailable" });

    next();
  },
};

export default accessControlManager;
