/**
 * Access token manager which is used to create and verify access token
 * Function will `throw` error incase its unable to create an access token
 */
export declare const accessTokenManager = {
  /**
   * Function which is used to create access token
   * @param { string } userId
   * @param { Object } payload
   * @param { string } userAgent
   */
  generate: (userId: string, payload: Object, userAgent: string): string => {},

  /**
   * Function which is used to verify access token
   * Function will return verified jwt token data, if its able to verify, otherwise it throw's error
   * @param { string } accessToken
   * @param { string } userAgent
   */
  verify: (accessToken: string, userAgent: string): Object => {},

  /**
   * Function which is used to hash a text
   * @param text
   */
  hash: (text: string): string => {},
};

/**
 * Access Control Manager Middleware to verify auth token and to verify client access
 */
export declare const accessControlManager = {
  /**
   * Middleware to verify the access token
   */
  auth: (req: Express.Request, res: Express.Response, next: Express.NextFunction) => {},
  /**
   * Middleware to check the hash key verification
   */
  client: (req: Express.Request, res: Express.Response, next: Express.NextFunction) => {},
};

/**
 * Service which is used to convert plain string to base64 string and base64 text into normal string
 */
export declare const base64 = {
  /**
   * Function to convert string to base64 string
   * @param { string } plainText
   * @returns
   */
  encode: (plainText: string): string => {},
  /**
   * Function to convert base64 string to normal string
   * @param { string } base64Text
   * @returns
   */
  decode: (base64Text: string): string => {},
};
